/**
 * @since 1.0.0
 */
import * as Equal from "@effect/data/Equal";
import * as Dual from "@effect/data/Function";
import * as Hash from "@effect/data/Hash";
import * as Option from "@effect/data/Option";
const TypeId = /*#__PURE__*/Symbol.for("@effect/data/MutableHashMap");
/** @internal */
class Node {
  constructor(k, v, next) {
    this.k = k;
    this.v = v;
    this.next = next;
  }
  [Symbol.iterator]() {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    let c = this;
    let n = 0;
    return {
      next: () => {
        if (c) {
          const kv = [c.k, c.v];
          c = c.next;
          n++;
          return {
            value: kv,
            done: false
          };
        } else {
          return {
            value: n,
            done: true
          };
        }
      }
    };
  }
}
/** @internal */
class MutableHashMapImpl {
  constructor() {
    this._id = TypeId;
    this.backingMap = new Map();
    this.length = 0;
  }
  [Symbol.iterator]() {
    return Array.from(this.backingMap.values()).flatMap(node => {
      const arr = [[node.k, node.v]];
      let next = node.next;
      while (next) {
        arr.push([next.k, next.v]);
        next = next.next;
      }
      return arr;
    })[Symbol.iterator]();
  }
  toString() {
    return `MutableHashMap(${Array.from(this).map(([k, v]) => `[${String(k)}, ${String(v)}]`).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "MutableHashMap",
      values: Array.from(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
export const empty = () => new MutableHashMapImpl();
/**
 * @since 1.0.0
 * @category constructors
 */
export const make = (...entries) => fromIterable(entries);
/**
 * @since 1.0.0
 * @category conversions
 */
export const fromIterable = entries => {
  const map = empty();
  for (const entry of entries) {
    set(map, entry[0], entry[1]);
  }
  return map;
};
/**
 * @since 1.0.0
 * @category elements
 */
export const get = /*#__PURE__*/Dual.dual(2, (self, key) => {
  const hash = Hash.hash(key);
  const arr = self.backingMap.get(hash);
  if (arr === undefined) {
    return Option.none();
  }
  let c = arr;
  while (c !== undefined) {
    if (Equal.equals(key, c.k)) {
      return Option.some(c.v);
    }
    c = c.next;
  }
  return Option.none();
});
/**
 * @since 1.0.0
 * @category elements
 */
export const has = /*#__PURE__*/Dual.dual(2, (self, key) => Option.isSome(get(self, key)));
/**
 * Updates the value of the specified key within the `MutableHashMap` if it exists.
 *
 * @since 1.0.0
 * @category mutations
 */
export const modify = /*#__PURE__*/Dual.dual(3, (self, key, f) => {
  const hash = Hash.hash(key);
  const arr = self.backingMap.get(hash);
  if (arr === undefined) {
    return self;
  }
  let c = arr;
  while (c !== undefined) {
    if (Equal.equals(key, c.k)) {
      c.v = f(c.v);
      return self;
    }
    c = c.next;
  }
  return self;
});
/**
 * Set or remove the specified key in the `MutableHashMap` using the specified
 * update function.
 *
 * @since 1.0.0
 * @category mutations
 */
export const modifyAt = /*#__PURE__*/Dual.dual(3, (self, key, f) => {
  const result = f(get(self, key));
  if (Option.isSome(result)) {
    set(self, key, result.value);
  } else {
    remove(self, key);
  }
  return self;
});
/**
 * @since 1.0.0
 * @category mutations
 */
export const remove = /*#__PURE__*/Dual.dual(2, (self, key) => {
  const hash = Hash.hash(key);
  const arr = self.backingMap.get(hash);
  if (arr === undefined) {
    return self;
  }
  if (Equal.equals(key, arr.k)) {
    if (arr.next !== undefined) {
      self.backingMap.set(hash, arr.next);
    } else {
      self.backingMap.delete(hash);
    }
    self.length = self.length - 1;
    return self;
  }
  let next = arr.next;
  let curr = arr;
  while (next !== undefined) {
    if (Equal.equals(key, next.k)) {
      curr.next = next.next;
      self.length = self.length - 1;
      return self;
    }
    curr = next;
    next = next.next;
  }
  return self;
});
/**
 * @since 1.0.0
 * @category mutations
 */
export const set = /*#__PURE__*/Dual.dual(3, (self, key, value) => {
  const hash = Hash.hash(key);
  const arr = self.backingMap.get(hash);
  if (arr === undefined) {
    self.backingMap.set(hash, new Node(key, value));
    self.length = self.length + 1;
    return self;
  }
  let c = arr;
  let l = arr;
  while (c !== undefined) {
    if (Equal.equals(key, c.k)) {
      c.v = value;
      return self;
    }
    l = c;
    c = c.next;
  }
  self.length = self.length + 1;
  l.next = new Node(key, value);
  return self;
});
/**
 * @since 1.0.0
 * @category elements
 */
export const size = self => self.length;
//# sourceMappingURL=MutableHashMap.mjs.map