/**
 * @since 1.0.0
 */
import * as Equal from "@effect/data/Equal";
import * as Dual from "@effect/data/Function";
const TypeId = /*#__PURE__*/Symbol.for("@effect/data/MutableRef");
class MutableRefImpl {
  constructor(current) {
    this.current = current;
    this._T = _ => _;
    this._id = TypeId;
  }
  get() {
    return this.current;
  }
  set(value) {
    this.current = value;
    return this;
  }
  setAndGet(value) {
    this.current = value;
    return this.current;
  }
  getAndSet(value) {
    const ret = this.current;
    this.current = value;
    return ret;
  }
  compareAndSet(oldValue, newValue) {
    if (Equal.equals(oldValue, this.current)) {
      this.current = newValue;
      return true;
    }
    return false;
  }
  pipe(f) {
    return f(this);
  }
  update(f) {
    return this.set(f(this.get()));
  }
  updateAndGet(f) {
    return this.setAndGet(f(this.get()));
  }
  getAndUpdate(f) {
    return this.getAndSet(f(this.get()));
  }
  toString() {
    return `MutableRef(${String(this.current)})`;
  }
  toJSON() {
    return {
      _tag: "MutableRef",
      current: this.current
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
export const make = value => new MutableRefImpl(value);
/**
 * @since 1.0.0
 * @category general
 */
export const compareAndSet = /*#__PURE__*/Dual.dual(3, (self, oldValue, newValue) => self.compareAndSet(oldValue, newValue));
/**
 * @since 1.0.0
 * @category numeric
 */
export const decrement = self => self.update(n => n - 1);
/**
 * @since 1.0.0
 * @category numeric
 */
export const decrementAndGet = self => self.updateAndGet(n => n - 1);
/**
 * @since 1.0.0
 * @category general
 */
export const get = self => self.current;
/**
 * @since 1.0.0
 * @category numeric
 */
export const getAndDecrement = self => self.getAndUpdate(n => n - 1);
/**
 * @since 1.0.0
 * @category numeric
 */
export const getAndIncrement = self => self.getAndUpdate(n => n + 1);
/**
 * @since 1.0.0
 * @category general
 */
export const getAndSet = /*#__PURE__*/Dual.dual(2, (self, value) => self.getAndSet(value));
/**
 * @since 1.0.0
 * @category general
 */
export const getAndUpdate = /*#__PURE__*/Dual.dual(2, (self, f) => self.getAndUpdate(f));
/**
 * @since 1.0.0
 * @category numeric
 */
export const increment = self => self.update(n => n + 1);
/**
 * @since 1.0.0
 * @category numeric
 */
export const incrementAndGet = self => self.updateAndGet(n => n + 1);
/**
 * @since 1.0.0
 * @category general
 */
export const set = /*#__PURE__*/Dual.dual(2, (self, value) => self.set(value));
/**
 * @since 1.0.0
 * @category general
 */
export const setAndGet = /*#__PURE__*/Dual.dual(2, (self, value) => self.setAndGet(value));
/**
 * @since 1.0.0
 * @category general
 */
export const update = /*#__PURE__*/Dual.dual(2, (self, f) => self.update(f));
/**
 * @since 1.0.0
 * @category general
 */
export const updateAndGet = /*#__PURE__*/Dual.dual(2, (self, f) => self.updateAndGet(f));
/**
 * @since 1.0.0
 * @category boolean
 */
export const toggle = self => self.update(_ => !_);
//# sourceMappingURL=MutableRef.mjs.map